/*
 * This source file was generated by the Gradle 'init' task
 */
package ctci;

import java.util.Map;
import java.io.Reader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;


import org.junit.BeforeClass;
import org.junit.Test;
import com.google.gson.*;

import ctci.*;

import static org.junit.Assert.*;

public class AppTest {
    public static Map<String, String> data;
    
    @BeforeClass public static void loadTestDataFile() throws IOException {
        Reader reader = Files.newBufferedReader(Paths.get("./src/test/java/ctci/TestData.json"));
        Gson gson = new Gson();
        data = gson.fromJson(reader, Map.class);
    }
    
    @Test public void str_1_1_UniqueCharsS1() {
        assertFalse(str_1_1_DupSol1.findIn(data.get("1_1_unique_chars")));
    }
    
    @Test public void str_1_1_DuplicateCharsS1() {
        assertTrue(str_1_1_DupSol1.findIn(data.get("1_1_duplicate_chars")));
    }

    @Test public void str_1_1_UniqueCharsS2() {
        assertFalse(str_1_1_DupSol2.findIn(data.get("1_1_unique_chars")));
    }
    
    @Test public void str_1_1_DuplicateCharsS2() {
        assertTrue(str_1_1_DupSol2.findIn(data.get("1_1_duplicate_chars")));
    }

    @Test public void str_1_2_perm_diff_size() {
        assertFalse(str_1_2_Permutation.permutations(
            data.get("str_1_2_permutation_s1"),
            data.get("str_1_2_permutation_s5")
        ));
    }

    @Test public void str_1_2_perm1() {
        assertFalse(str_1_2_Permutation.permutations(
            data.get("str_1_2_permutation_s1"),
            data.get("str_1_2_permutation_s3")
        ));
    }

    @Test public void str_1_2_perm2() {
        assertFalse(str_1_2_Permutation.permutations(
            data.get("str_1_2_permutation_s1"),
            data.get("str_1_2_permutation_s3")
        ));
    }

    @Test public void str_1_2_perm3() {
        assertFalse(str_1_2_Permutation.permutations(
            data.get("str_1_2_permutation_s1"),
            data.get("str_1_2_permutation_s4")
        ));
    }

    @Test public void str_1_2_perm4() {
        assertFalse(str_1_2_Permutation.permutations(
            data.get("str_1_2_permutation_s5"),
            data.get("str_1_2_permutation_s6")
        ));
    }

    @Test public void str_1_2_perm5() {
        assertTrue(str_1_2_Permutation.permutations(
            data.get("str_1_2_permutation_s1"),
            data.get("str_1_2_permutation_s2")
        ));
    }


}
